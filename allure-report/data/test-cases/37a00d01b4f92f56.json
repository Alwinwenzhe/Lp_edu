{
  "uid" : "37a00d01b4f92f56",
  "name" : "test_myself_002_member_list[case1]",
  "fullName" : "TestCase_003_o2o.test_o2o_001_myself.TestO2O001Myself#test_myself_002_member_list",
  "historyId" : "8886584f7e7d9c7449675922656cd8b9",
  "time" : {
    "start" : 1605874401764,
    "stop" : 1605874402500,
    "duration" : 736
  },
  "description" : "\n            用例描述：首页--每日登陆获取积分\n        ",
  "descriptionHtml" : "<pre><code>        用例描述：首页--每日登陆获取积分\n</code></pre>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <test_o2o_001_myself.TestO2O001Myself object at 0x0000011EACD71B08>\ncase = {'Comment': '', 'ID': '0073', 'advice': '', 'case_description': '我的--个人信息', ...}\n\n    @pytest.mark.parametrize('case', excel.get_excel_data('myself_002_member_list'))\n    def test_myself_002_member_list(self, case):\n        \"\"\"\n            用例描述：首页--每日登陆获取积分\n        \"\"\"\n>       self.new.test_case_method(case, 'get')\n\nTestCase_003_o2o\\test_o2o_001_myself.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nCommon\\new_tool_a.py:360: in test_case_method\n    self.test.assert_common(response['code'], response['body'], expect, response['time_consuming'])\nCommon\\Assert.py:118: in assert_common\n    assert self.assert_in_text(res_body, res_expect)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Common.Assert.Assertions object at 0x0000011EACDF6488>\nbody = {'code': 1004, 'msg': '用户ID参数为空', 'ts': 1605874403461}\nexpected_msg = '我不帅'\n\n    def assert_in_text(self, body, expected_msg):\n        \"\"\"\n        验证response body中是否包含预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            text = json.dumps(body, ensure_ascii=False)         # 将body序列化为JSON格式的str\n            # print(text)\n>           assert expected_msg in text\nE           AssertionError\n\nCommon\\Assert.py:65: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "\n            用例描述：首页--每日登陆获取积分\n        ",
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <test_o2o_001_myself.TestO2O001Myself object at 0x0000011EACD71B08>\ncase = {'Comment': '', 'ID': '0073', 'advice': '', 'case_description': '我的--个人信息', ...}\n\n    @pytest.mark.parametrize('case', excel.get_excel_data('myself_002_member_list'))\n    def test_myself_002_member_list(self, case):\n        \"\"\"\n            用例描述：首页--每日登陆获取积分\n        \"\"\"\n>       self.new.test_case_method(case, 'get')\n\nTestCase_003_o2o\\test_o2o_001_myself.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nCommon\\new_tool_a.py:360: in test_case_method\n    self.test.assert_common(response['code'], response['body'], expect, response['time_consuming'])\nCommon\\Assert.py:118: in assert_common\n    assert self.assert_in_text(res_body, res_expect)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Common.Assert.Assertions object at 0x0000011EACDF6488>\nbody = {'code': 1004, 'msg': '用户ID参数为空', 'ts': 1605874403461}\nexpected_msg = '我不帅'\n\n    def assert_in_text(self, body, expected_msg):\n        \"\"\"\n        验证response body中是否包含预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            text = json.dumps(body, ensure_ascii=False)         # 将body序列化为JSON格式的str\n            # print(text)\n>           assert expected_msg in text\nE           AssertionError\n\nCommon\\Assert.py:65: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "165f449df8f41928",
      "name" : "log",
      "source" : "165f449df8f41928.txt",
      "type" : "text/plain",
      "size" : 121
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "ysy_Login"
  }, {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "story",
    "value" : "Log in"
  }, {
    "name" : "parentSuite",
    "value" : "TestCase_003_o2o"
  }, {
    "name" : "suite",
    "value" : "test_o2o_001_myself"
  }, {
    "name" : "subSuite",
    "value" : "TestO2O001Myself"
  }, {
    "name" : "host",
    "value" : "DESKTOP-64VUMUD"
  }, {
    "name" : "thread",
    "value" : "12708-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "TestCase_003_o2o.test_o2o_001_myself"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case",
    "value" : "{'ID': '0073', 'envir': 'ysy_release', '前置用例': '', 'module': 'myself_002_member_list', 'case_description': '我的--个人信息', 'case_url': '/api/v1/family/member/list?userId=j::userId', 'case_header': '{\"Content-Type\":\"application/json; charset=UTF-8\",\"enterpriseId\":\"1122c78ae5d140a5acbaa9e75c8b8994\",\"accessToken\":\"j::accessToken\"}', 'case_global_var': '', 'case_preset': '', 'case_params': '', 'case_expect': \"SELECT IFNULL(u.nick_name,'query is error') from `user` u WHERE u.mobile='{0[0]}'format(c::ysy_user);\", 'Comment': '', 'advice': ''}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "37a00d01b4f92f56.json",
  "parameterValues" : [ "{'ID': '0073', 'envir': 'ysy_release', '前置用例': '', 'module': 'myself_002_member_list', 'case_description': '我的--个人信息', 'case_url': '/api/v1/family/member/list?userId=j::userId', 'case_header': '{\"Content-Type\":\"application/json; charset=UTF-8\",\"enterpriseId\":\"1122c78ae5d140a5acbaa9e75c8b8994\",\"accessToken\":\"j::accessToken\"}', 'case_global_var': '', 'case_preset': '', 'case_params': '', 'case_expect': \"SELECT IFNULL(u.nick_name,'query is error') from `user` u WHERE u.mobile='{0[0]}'format(c::ysy_user);\", 'Comment': '', 'advice': ''}" ]
}